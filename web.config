<?xml version="1.0"?>
<!--
    Note: As an alternative to hand editing this file you can use the
    web admin tool to configure settings for your application. Use
    the Website->Asp.Net Configuration option in Visual Studio.
    A full list of settings and comments can be found in
    machine.config.comments usually located in
    \Windows\Microsoft.Net\Framework\v2.x\Config
-->
<configuration>
  <appSettings>
    <add key="debugprefix" value="www"/>
    <!--App-Specific-->
    <add key="urlsuffix" value="acuityapm"/>
    <add key="jslib" value="../lib/"/>
    <!--    <add key="jslib" value="//lib.acuityapmr.com/"/> -->
    <!--Server-Specific-->
    <add key="tempfolder" value="C:\importtmp"/>
  </appSettings>
  <connectionStrings/>
  <system.web>
    <httpRuntime appRequestQueueLimit="10000" maxRequestLength="1048576" requestValidationMode="2.0" maxQueryStringLength="10000"/>
    <!--
            Set compilation debug="true" to insert debugging
            symbols into the compiled page. Because this
            affects performance, set this value to true only
            during development.

            Visual Basic options:
            Set strict="true" to disallow all data type conversions
            where data loss can occur.
            Set explicit="true" to force declaration of all variables.
      -->
    <compilation debug="true" targetFramework="4.0">
      <assemblies>
        <add assembly="Microsoft.JScript, Version=10.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
      </assemblies>
    </compilation>
    <pages theme="CEScore" controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID"/>
    <!--
            The <authentication> section enables configuration
            of the security authentication mode used by
            ASP.NET to identify an incoming user.
        -->
    <!--
    <httpCookies sameSite="Strict"/>
    <sessionState cookieSameSite="Strict" />
    <authentication mode="Forms">
      <forms cookieSameSite="Strict" />
    </authentication>
    -->
    <!--
            The <customErrors> section enables configuration
            of what to do if/when an unhandled error occurs
            during the execution of a request. Specifically,
            it enables developers to configure html error pages
            to be displayed in place of a error stack trace.
        -->
    <customErrors mode="Off"/>
  </system.web>
  <system.webServer>
    <httpProtocol>
      <customHeaders>
        <!-- Good resource for header specs: https://www.serpworx.com/check-security-headers -->
        <!-- <add name="Access-Control-Allow-Origin" value="*" /> -->
      </customHeaders>
    </httpProtocol>
    <rewrite>
      <rules>
        <rule name="HTTPS Redirect" stopProcessing="true">
          <match url="(.*)"/>
          <conditions>
            <add input="{HTTPS}" pattern="^OFF$"/>
          </conditions>
          <action type="Redirect" url="https://{HTTP_HOST}/{R:1}"/>
        </rule>
      </rules>
      <outboundRules>
        <clear/>
        <rule name="Add SameSite" preCondition="No SameSite">
          <match serverVariable="RESPONSE_Set_Cookie" pattern=".*" negate="false"/>
          <action type="Rewrite" value="{R:0}; SameSite=Strict"/>
          <conditions/>
        </rule>
        <rule name="Add Strict-Transport-Security when HTTPS" enabled="true">
          <match serverVariable="RESPONSE_Strict_Transport_Security" pattern=".*"/>
          <conditions>
            <add input="{HTTPS}" pattern="on" ignoreCase="true"/>
          </conditions>
          <action type="Rewrite" value="max-age=31536000"/>
        </rule>
        <preConditions>
          <preCondition name="No SameSite">
            <add input="{RESPONSE_Set_Cookie}" pattern="."/>
            <add input="{RESPONSE_Set_Cookie}" pattern="; SameSite=Strict" negate="true"/>
          </preCondition>
        </preConditions>
      </outboundRules>
    </rewrite>
  </system.webServer>
</configuration>